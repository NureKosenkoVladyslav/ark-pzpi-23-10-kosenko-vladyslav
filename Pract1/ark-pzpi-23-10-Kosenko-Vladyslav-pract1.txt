Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії

ЗВІТ
до практичного завдання № 1
з дисципліни «Аналіз та рефакторинґ коду»
на тему: «Основні рекомендації написання коду для мови програмування
Python»

Виконав
ст. гр. ПЗПІ-23-10
Косенко В.В

Перевірив
ст. викладач катедри ПІ
Сокорчук Ігор Петрович

Харків 2025


1 ІСТОРІЯ ЗМІН
23.10.25, версія 0.1 — створено розділ “Опис виконаної роботи”.
23.10.25, версія 0.1 — створено додаток А, додаток Б.
23.10.25, версія 0.1 — створено розділи “Історія змін”, “Завдання”,
“Висновки”.
23.10.25, версія 0.1 — створено додаток В.



2 ЗАВДАННЯ
Основна мета моєї роботи полягає у вивченні підходів до створення зрозумілого,
надійного та підтримуваного програмного коду з використанням Python. У процесі
виконання дослідження особлива увага приділяється практичному засвоєнню сучасних
підходів до розробки — використанню модулів, функціональному та об’єктноорієнтованому стилям програмування, роботі з асинхронними процесами й
бібліотеками. Такий підхід дозволяє формувати чистий, логічно структурований код,
що легко розширюється та оптимізується. Додатковим завданням є опанування
принципів організації програмних проєктів і раціонального застосування інструментів
розробки, що є важливим етапом становлення кваліфікованого спеціаліста у сфері
програмної інженерії.



3 ОПИС ВИКОНАНОЇ РОБОТИ

3.1 Вступ
Моя робота присвячена темі оформлення та структурування коду мовою Python.
Це питання є ключовим для будь-якого розробника, адже навіть найефективніший
алгоритм може стати джерелом проблем, якщо код написаний безсистемно. Акуратний
та впорядкований код — це не лише про естетику, а про ефективність, зрозумілість і
стабільність роботи програмного продукту. Python особливо підкреслює важливість
чистоти коду, оскільки його філософія базується на принципі “Readable code is better
than clever code”. Дотримання стандартів оформлення, зокрема рекомендацій PEP 8,
допомагає уникати хаосу, підвищує продуктивність команди та спрощує подальший
розвиток проєкту.

3.2 Значення охайного коду
Чистота коду — це насамперед турбота про зрозумілість і передбачуваність
програмної логіки. Добре структурований Python-код легко перевіряти, змінювати та
тестувати. Він знижує ризик помилок, пришвидшує розробку й робить співпрацю між
членами команди ефективнішою. Крім того, акуратне оформлення коду є запорукою
зниження технічного боргу та підвищення якості кінцевого продукту.
3.3 Іменування елементів програми

Одним із фундаментальних аспектів якісного коду є зрозумілі імена змінних,
функцій і класів. Змінні варто позначати коротко, але змістовно, використовуючи
нижній регістр та підкреслення (наприклад, user_name, total_sum). Імена функцій
повинні передавати дію — наприклад, calculate_average() або send_email(). Класи
прийнято оформлювати у стилі CamelCase, як-от UserProfile чи DataAnalyzer. Такі
правила забезпечують єдність стилю в усьому проєкті й дозволяють програмісту
швидко орієнтуватися у логіці програми без додаткових коментарів.
3.4 Форматування та структура коду

Ще однією важливою складовою є правильне форматування. Відступи в чотири
пробіли, послідовне використання порожніх рядків між функціями та класами, а також
уникання рядків довших за 80 символів — це базові принципи чистого Python-коду.
Вони роблять текст програми зручним для сприйняття та полегшують командну
розробку. Погано відформатований код ускладнює аналіз і тестування, тоді як
структурований — зменшує ризик помилок і підвищує швидкість роботи розробників.
3.5 Документація та коментарі

Жоден якісний проєкт не обходиться без документації. У Python для цього
використовують docstring — короткі текстові описи функцій, класів чи модулів, які
пояснюють їхнє призначення. Коментарі мають доповнювати код, але не дублювати
його. Вони потрібні для пояснення складних рішень або нетривіальних ділянок логіки.
Документування — це спосіб зробити код зрозумілим не лише для себе, а й для інших
членів команди або майбутніх розробників, які підтримуватимуть проєкт.

3.6 Типові помилки та їх уникнення
Часто розробники стикаються з типовими проблемами — надмірно довгі рядки,
відсутність пробілів навколо операторів, випадкове змішування табуляцій і пробілів,
неінформативні назви змінних. Такі дрібниці знижують читабельність і створюють
ризик виникнення непередбачених помилок. Використання лінтерів, таких як flake8 або
pylint, допомагає вчасно виявляти ці недоліки та автоматично дотримуватись
стандартів.

3.7 Структура Python-проєктів
Грамотно організована структура проєкту — ще один показник професійності.
Зазвичай програму розділяють на логічні частини: каталог src/ для основного коду,
tests/ для тестів і docs/ для документації. Кожен модуль має виконувати лише одну
конкретну задачу, а імпорти розміщуються на початку файлу. Такий підхід робить
проєкт масштабованим, передбачуваним і зручним для командної розробки.



4 ВИСНОВКИ
  Оформлення програмного коду — це не формальність, а
невід’ємна складова якісного процесу розробки програмного
забезпечення. Від того, наскільки структуровано, логічно й охайно
написано код, залежить не лише швидкість розробки, а й подальша
підтримка, масштабування та розвиток проєкту. Код, оформлений за
правилами, є своєрідною мовою спілкування між розробниками: він
дозволяє будь-кому швидко розібратися в логіці програми, зрозуміти
призначення кожного елемента та уникнути помилок при подальшому
доопрацюванні.
  Дотримання стандартів PEP 8 у Python забезпечує єдність
стилю, полегшує читання й аналіз програм, а також зменшує ризик
технічного боргу. Завдяки чіткому форматуванню, правильному
використанню відступів, зрозумілим іменам змінних та функцій,
продуманим коментарям і докстрінгам розробник формує код, який є
не лише функціональним, а й естетично привабливим. Такий код
легко тестувати, документувати й передавати іншим учасникам
команди, що особливо важливо в умовах колективної роботи.
  Окрім того, грамотне оформлення коду сприяє розвитку
професійної культури програміста. Воно виховує увагу до деталей,
дисципліну, відповідальність за кінцевий результат. Чистий і
читабельний код — це показник майстерності розробника, його
поваги до себе, своєї роботи та колег. Недотримання стандартів,
навпаки, призводить до хаосу в проєкті, ускладнює пошук помилок,
уповільнює виправлення багів і знижує продуктивність команди.
  Таким чином, оформлення коду — це фундамент професійного
програмування. Дотримання принципів PEP 8 і загальних правил
чистого коду допомагає створювати програмні продукти, які не
втрачають актуальності з часом, залишаються зрозумілими навіть
після багатьох місяців або років, і можуть безболісно розвиватися
разом із потребами користувачів. Якісно оформлений код — це не
просто технічна вимога, а ознака справжнього професіоналізму,
ефективної командної роботи та гарантія довговічності будь-якого
програмного рішення.



5 ВИКОРИСТАНІ ДЖЕРЕЛА
1. Martin, R. C. Clean Code: A Handbook of Agile Software Craftsmanship. —
Upper Saddle River: Prentice Hall, 2008. — 464 с. — Режим доступу:
https://www.investigatii.md/uploads/resurse/Clean_Code.pdf, вільний. — Дата
звернення: 23.10.2025.
2. PEP 8 — Style Guide for Python Code. — Режим доступу:
https://peps.python.org/pep-0008/, вільний. — Дата звернення: 23.10.2025.
3. Python.org Documentation. — Режим доступу: https://docs.python.org/3/, вільний.
— Дата звернення: 23.10.2025.
4. Real Python Blog — Writing Clean and Readable Code. — Режим доступу:
https://realpython.com/, вільний. — Дата звернення: 23.10.2025.



ДОДАТОК А
Відеозапис
Відеозапис доповіді: https://youtu.be/yhGXEsKVoMI
Хронологічний опис відеозапису:
00:00 - Вступ
00:35 - Значення чистого коду
01:05 - Загальні правила оформлення коду
01:49 - Оформлення функцій та методів
03:32 - Форматування коду
05:11 - Поганий приклад коду
06:15 - Хороший приклад коду
07:06 - Типові помилки при оформленні коду
07:38 - Форматування і структура проєктів
08:06 - Висновки
08:26 - Список використаних джерел


ДОДАТОК Б
Слайди презентації

Рисунок Б.1 — Титульний слайд

Рисунок Б.2 — Вступ

Рисунок Б.3 — Значення чистого коду

Рисунок Б.4 — Загальні правила оформлення коду

Рисунок Б.5 — Оформлення функцій та методів

Рисунок Б.6 — Форматування коду

Рисунок Б.7 — Поганий приклад коду

Рисунок Б.8 — Хороший приклад коду

Рисунок Б.9 — Типові помилки при оформленні Python-коду

Рисунок Б.10 — Форматування й структура Python-проєктів

Рисунок Б.11 — Висновки

Рисунок Б.12 — Список використаних джерел


В.1. Приклад оформлення програмного коду

GitHub-репозиторій:
https://github.com/NureKosenkoVladyslav/ark-pzpi-23-10-kosenkovladyslav/blob/main/Pract1/ark-pzpi-23-10-Kosenko-Vladyslavpract1/code_examples_code_conventions.py

Добре:
1. def calculate_sum(first_number: int, second_number: int) -> int:
2.     """Повертає суму двох чисел."""
3.     return first_number + second_number
4.
5. def main():
6.     number_a = 5
7.     number_b = 10
8.     print(f'Sum = {calculate_sum(number_a, number_b)}')
9.
10. if __name__ == '__main__':
11.     main()

Погано:
12. def calc(x, y): return x + y
13.
14. def main():
15.     x = 5; y = 10; print('sum=', calc(x, y))
16.
17. main()


GitHub-репозиторій:
https://github.com/NureKosenkoVladyslav/ark-pzpi-23-10-kosenkovladyslav/blob/main/Pract1/ark-pzpi-23-10-Kosenko-Vladyslavpract1/code_examples_code_conventions.py

В.2. Приклад документування програмного коду
1. def calculate_monthly_payment(principal: float, annual_rate: float, months: int) -> float:
2.     """
3.     Обчислює щомісячний платіж за кредитом.
4.
5.     Parameters:
6.         principal (float): сума позики.
7.         annual_rate (float): річна процентна ставка.
8.         months (int): кількість місяців виплат.
9.
10.    Returns:
11.        float: сума щомісячного платежу.
12.    """
13.    monthly_rate = annual_rate / 12 / 100
14.    payment = principal * (monthly_rate * (1 + monthly_rate) ** months) / ((1 + monthly_rate) ** months - 1)
15.    return round(payment, 2)
